# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet rimp "Description" b
import React from 'react';
endsnippet

snippet rfc "React Functional Component" A
import React, { FC } from 'react';

interface $1Props {
}

/**
* @description $1
*/
const $1:FC<$1Props> = ({}) => {
	return (
		<div>$1 works!</div>
	);
};

export default $1;
endsnippet

snippet FC "Functional Component" b
interface $1Props {
}

/**
* @description $1
*/
const $1:FC<$1Props> = ({}) => {
	return (
		<div>$1 works!</div>
	);
};

export default $1;
endsnippet

snippet rhp "React Hooks Provider" b
import React, { FC, createContext, useContext } from 'react';

interface $1State {
}

const $1Context = createContext<$1State>({

});

export const $1Provider:FC = ({ children }) => {
	const state:$1State = {
	}

	return (
		<$1Context.Provider value={ state }>
			{ children }
		</$1Context.Provider>
	)
}

export const use$1 = () => (
	useContext($1Context)
);

endsnippet
